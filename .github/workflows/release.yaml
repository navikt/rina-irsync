name: Build Native Images and Release

on:
  push:
    tags:
      - 'v*'  # Run when pushing tags like v1.0.0
  workflow_dispatch:
    inputs:
      version:
        description: 'Version for this release'
        required: true
        default: '1.0.0'

jobs:
  build-native:
    name: Build Native Image - ${{ matrix.name }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        include:
          - name: "Linux (x64)"
            os: ubuntu-latest
            artifact_name: irsync-linux-x64
          - name: "Windows (x64)"
            os: windows-latest
            artifact_name: irsync-windows-x64.exe

    steps:
      - name: Check out repository
        uses: actions/checkout@v3

      - name: Cache Maven dependencies
        uses: actions/cache@v3
        with:
          path: ~/.m2/repository
          key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
          restore-keys: |
            ${{ runner.os }}-maven-

      - name: Set up GraalVM
        uses: graalvm/setup-graalvm@v1
        with:
          java-version: '21'
          distribution: 'graalvm'
          github-token: ${{ secrets.GITHUB_TOKEN }}
          native-image-job-reports: 'true'
          cache: 'maven'

      - name: Build with Maven
        run: ./mvnw -Pnative native:compile -DskipTests=true -Dnative.buildtools.sbom.enabled=true -Dnative.pgo.enabled=true -Dnative.image.strict-image-heap=true -Dnative.image.heap.max=8G -Dnative.image.compiler.march=native -Dnative.image.quick-build=true -Dnative.image.enable-sbom=true -Dnative.image.pgo=true -Dnative.image.heap.max=8G -Dnative.image.compiler.quick-build=true
        shell: bash

      - name: Copy Binary (Unix)
        if: runner.os != 'Windows'
        run: |
          mkdir -p dist
          for location in "target/irsync" "target/native/irsync"; do
            if [ -f "$location" ]; then
              cp "$location" "dist/${{ matrix.artifact_name }}"
              chmod +x "dist/${{ matrix.artifact_name }}"
              exit 0
            fi
          done
          echo "Binary not found in expected locations"
          find target -type f -executable
          exit 1

      - name: Copy Binary (Windows)
        if: runner.os == 'Windows'
        shell: cmd
        run: |
          mkdir dist
          if exist "target\irsync.exe" (
            copy "target\irsync.exe" "dist\${{ matrix.artifact_name }}"
          ) else if exist "target\native\irsync.exe" (
            copy "target\native\irsync.exe" "dist\${{ matrix.artifact_name }}"
          ) else (
            echo Binary not found in expected locations
            dir /s "target\*.exe"
            exit /b 1
          )

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.artifact_name }}
          path: dist/${{ matrix.artifact_name }}

  release:
    name: Create Release
    runs-on: ubuntu-latest
    needs: [build-native]
    permissions:
      contents: write
    steps:
      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: ./artifacts

      - name: Determine version
        id: get_version
        run: |
          if [ "${{ github.event_name }}" == "push" ]; then
            VERSION=${GITHUB_REF#refs/tags/v}
          else
            VERSION=${{ github.event.inputs.version }}
          fi
          echo "VERSION=${VERSION}" >> $GITHUB_OUTPUT
        shell: bash

      - name: Generate SHA-256 checksums
        shell: bash
        run: |
          # Generate checksums for all binaries
          sha256sum ./artifacts/*/irsync-* | while read -r checksum file; do
            echo "$checksum  ${file##*/}"
          done > checksums.txt
          # Print for debugging
          cat checksums.txt
          
      - name: Import GPG Key
        run: |
          echo "${{ secrets.GPG_PRIVATE_KEY }}" | gpg --batch --import
          # Trust the key
          echo "6:6" | gpg --import-ownertrust

      - name: Sign checksums
        run: |
          echo "${{ secrets.GPG_PASSPHRASE }}" | gpg --batch --yes --passphrase-fd 0 --pinentry-mode loopback \
            --detach-sign --armor --output checksums.txt.sig checksums.txt
          ls -la checksums.txt*  # Verify files exist
          gpg --verify checksums.txt.sig checksums.txt

      - name: Create Release
        uses: softprops/action-gh-release@v1
        with:
          name: Release v${{ steps.get_version.outputs.VERSION }}
          tag_name: ${{ github.event_name == 'push' && github.ref || format('v{0}', github.event.inputs.version) }}
          draft: false
          prerelease: false
          generate_release_notes: true
          files: |
            ./artifacts/irsync-linux-x64/irsync-linux-x64
            ./artifacts/irsync-windows-x64.exe/irsync-windows-x64.exe
            checksums.txt
            checksums.txt.sig
          body: |
            ### Changelog
            ${{ steps.git-log.outputs.commit_history }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
